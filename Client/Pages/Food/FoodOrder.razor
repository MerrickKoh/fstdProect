@page "/FoodsOrder/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
<h3>Foods</h3>
<br />
<br />
@if (Foods == null)
{
    <div class="alert alert-info">Loading Foods...</div>
}

else
{
    <table class="table table-responsive" id="fTable">
        <thead>
            <tr>
                <th>Picture</th>
                <th>Name</th>
                <th>Catergory</th>
                <th>Event</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Food in Foods)
            {
                <tr>
                    <td>
                        <img src="@Food.ImgUrl" width="100" height="100" alt="Food Image">
                    </td>
                    <td>@Food.Name</td>
                    <td>@Food.Catergory.Name</td>
                    <td>@Food.Events.Name</td>
                    <td>@Food.Price</td>

                    <td>
                        <a href="/FoodsOrder/buy/@Food.Id" class="btn btn-success">
                            BUY NOW
                        </a>


                    </td>
                </tr>
            }

        </tbody>
    </table>
}




@code {

    private List<Food> Foods;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Foods = await _client.GetFromJsonAsync<List<Food>>($"{EndPoint.FoodsEndPoint}");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#fTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#fTable");
        _interceptor.DisposeEvent();
    }

}
